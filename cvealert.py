#!/usr/bin/python3

# 群机器人的webhook写这里,支持钉钉/企业微信/WgpSecBot(微信),一行一个
# 钉钉需要设置自定义关键词为`CVE`或IP白名单
webhooks = """\


""".split("\n")

import requests
import time
import sys
import os

headers = {
    "Referer": "https://github.com/p7e4/CVE-Alert",
    "User-Agent": "CVE-Alert"
}


def getCve(lastRunTimestamp):
    now = time.strftime("%Y-%m-%dT%X:000 UTC", time.gmtime(time.time()))
    last = time.strftime("%Y-%m-%dT%X:000 UTC", time.gmtime(lastRunTimestamp))
    api = f"https://services.nvd.nist.gov/rest/json/cves/1.0?resultsPerPage=2000&pubStartDate={last}&pubEndDate={now}"
    data = []

    for item in requests.get(api, timeout=30, headers=headers).json()["result"]["CVE_Items"]:
        refs = []
        for ref in item["cve"]["references"]["reference_data"]:
            refs.append(f"[{ref['url']}]({ref['url']})")

        refs = "\n".join(refs)
        cve = item["cve"]["CVE_data_meta"]["ID"]
        description = item["cve"]["description"]["description_data"][0]["value"].replace("\n\n", "\n").rstrip("\r\n")
        data.append(f"**[{cve}](https://nvd.nist.gov/vuln/detail/{cve})**\n> {description}\n\nReferences:\n> {refs}")

    return data


def main():
    runtime = int(time.time())
    
    recordFile = f"{sys.path[0]}/.cvealert"

    if os.path.exists(recordFile):
        with open(recordFile) as f:
            sendMessages(getCve(int(f.read()) - 1))
    else:
        sendMessages(getCve(time.time() - 60 * 60 * 24)[-5:])

    with open(recordFile, "w") as f:
        f.write(str(runtime))


def sendMessages(messages):
    # 钉钉 https://open.dingtalk.com/document/group/custom-robot-access
    # 企业微信 https://developer.work.weixin.qq.com/document/path/91770
    fq = 0
    for message in messages[::-1]:
        if not webhook: continue
        for webhook in webhooks:
            if webhook.startswith("https://oapi.dingtalk.com"):
                markdown = {
                    "title":"有新的推送消息",
                    "text": message
                }
            elif webhook.startswith("https://qyapi.weixin.qq.com"):
                markdown = {
                    "content": message
                }
            else:
                exit(f"未知的通知地址: {webhook}")

            send = {
               "msgtype": "markdown",
               "markdown": markdown
            }

            r = requests.post(webhook, json=send, timeout=20)
            if r.json()["errcode"] != 0:
                exit(f"发送消息失败: {r.text}")


        fq += 1
        if fq % 20 == 0:
            time.sleep(60)


if __name__ == '__main__':
    main()

