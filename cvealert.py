#! /usr/bin/python
# coding:utf-8

config = {
    "smtp_server": "smtp.qq.com",            #邮件服务器地址，目前仅测试过qq邮箱
    "smtp_port": 465,                        #端口号
    "mail_addr": "ppppppppppp@qq.com",       #登陆账号
    "auth_code": "password",                 #授权码
    "mail_subject": "最新CVE漏洞",            #邮件标题
    "mail_to": "p7e4 <p7e4@github.com>",     #收件人信息
    "send_list": [                           #发送邮件列表
        "test@qq.com",
        # "test1@qq.com",
        # "test2@qq.com"
    ]
}

template = """\
<html>
<style>
html,body { height:100%; }
body { font-family: Verdana, Helvetica, sans-serif; background-color: #ffffff;}
td { font-family: Verdana, Helvetica, sans-serif;}
th { font-family: Verdana, Helvetica, sans-serif; }
a { color:#3377CC }
a:hover { color:#880000; }

#TableWithRules table {border-collapse: collapse;}
#TableWithRules td { vertical-align:top; border-bottom: 1px solid #e0dbd2; padding: 3px 5px 3px 5px; align:top; font-size:90%; }
#TableWithRules td p { margin-top:0px; margin-bottom:5px }
#TableWithRules th {border-top: 1px solid #cccccc; border-bottom: 1px solid #cccccc; align:top; padding-left:5px; padding-right:5px; font-size:100%; color: #444444; font-weight: bold; text-align: center; background-color: #e0dbd2 }
#TableWithRules th.heading {
    background-color:#ffffff;
    border:none; align:top;
    font-size:120%;
    color: #000000;
    font-weight: bold;
    padding-top:12px; padding-bottom:15px;
    text-align: center;
    margin-bottom: 10px; margin-top: 5px;
    }

#TableWithRules td.heading {
    background-color:#706c60;
    color: #ffffff;
    font-weight: bold;
    text-align: center;
    }

#TableWithRules .spacer {border: none; border-top:1px solid #e5cfcf}
#TableWithRules .indent {padding: 0px 3px 0px 12px}
#TableWithRules .head {font-weight:bold}
#TableWithRules.white td {border: 1px solid #ffffff;}
#TableWithRules.white th {border: 1px solid #ffffff;}
.redtablecell {
    background-color: #A6918F;
    font-size: 85%;
    font-weight: bold;
    color: #ffffff;
}
</style>
<div id="TableWithRules">
<table cellpadding="0" cellspacing="0" border="0" width="100%">
<thead>
    <tr>
        <th valign="top" style="padding:3px">Name</th>
        <th valign="top" style="padding:3px">Description</th>
    </tr>
</thead>
"""

CVE_Items = """
    <tr>
        <td valign="top" nowrap="nowrap"><a href="https://nvd.nist.gov/vuln/detail/{}">{}</a></td>
        <td valign="top">{}

</td>
    </tr>
"""


import requests
import os
import time
import json
from email.mime.text import MIMEText
import smtplib


def get_list(last_time):
    api = "https://services.nvd.nist.gov/rest/json/cves/1.0?resultsPerPage=2000&index=0&pubStartDate=" + last_time.replace("+","%2b")
    data = []
    try:
        r = requests.get(api)
        if r.status_code == 200:
            for item in r.json()["result"]["CVE_Items"]:
                data.append(CVE_Items.format(*[item["cve"]["CVE_data_meta"]["ID"]]*2 + [item["cve"]["description"]["description_data"][0]["value"]]))
            if data:
                return template + "".join(data) + "\n</table>\n</div>\n</html>"
        else:
            print(r.status_code)
    except Exception as e:
        exit("获取CVE列表失败--" + str(e))


def main():
    runTime = time.strftime("%Y-%m-%dT%X:000 UTC+08:00",time.localtime())
    if not os.path.exists(".progress.json"):
        default_progress = {
            "last_time": time.strftime("%Y-%m-%dT%X:000 UTC+08:00",time.localtime(time.time()-60*60*24*2))
        }
        with open(".progress.json","w") as f:
            json.dump(default_progress,f)
        PR = default_progress
    else:
        with open('.progress.json',) as f:
            PR = json.load(f)

    result = get_list(PR["last_time"])
    if result:
        send_mail(result)

    with open(".progress.json","w") as f:
        json.dump({"last_time": runTime},f)


def send_mail(data):
    try:
        stmp=smtplib.SMTP_SSL(config["smtp_server"],config["smtp_port"])
        stmp.login(config["mail_addr"],config["auth_code"])
    except Exception as e:
        exit('登陆失败--' + str(e))

    message = MIMEText(data, 'html', 'utf-8')
    message['From'] = config["mail_addr"]
    message['To'] = config["mail_to"]
    message['Subject'] = config["mail_subject"]

    try:
        stmp.sendmail(config["mail_addr"], config["send_list"], message.as_string())
    except Exception as e:
        exit('邮件发送失败--' + str(e))
    else:
        stmp.quit()

if __name__ == '__main__':
    main()

